import validator from "validator"
import bcrypt from "bcrypt" 
// becrypt is used to encrypt password
import { v2 as cloudinary } from "cloudinary"
import doctorModel from "../models/doctorModel.js"
import  jwt  from "jsonwebtoken"
<<<<<<< HEAD
import appointmentModel from "../models/appointmentModel.js"
import userModel from "../models/userModel.js"
=======
>>>>>>> d6b3eced8a5a1a0b4c95a379cd564575809c0a4c
//API for adding doctor 
const addDoctor = async (req,res) => {
    try {
      const {name, email,password, speciality,degree, experience, about, fees, address} = req.body
          const imageFile = req.file

          // checking for all data ton add doctor
          if(!name || !email || !password || !speciality || !degree || !experience || !about || !fees || !address) {
            return res.json({success:false, message:"Missing Details"})
          } 

          // validating email format
          if(!validator.isEmail(email)) {
             return res.json({success:"false", message:"Please enter a valid email"})
          }

          //validating strong password
          if(password.length<8) {
            return res.json({success:false, message: "please enter a strong password"})
          }
        
         // hashing  doctor password
          //bcrypt.genSalt(10) is used to add string to tha password 
           //bcrypt.hash(password, salt)  is used to hash the password 
          const salt = await bcrypt.genSalt(10)     
          const hashedPassword = await bcrypt.hash(password, salt)
          
        //  upload image to cloudinary
      const imageUpload = await cloudinary.uploader.upload(imageFile.path, {resource_type:"image"}) 
      const imageUrl = imageUpload.secure_url

      const doctorData = {
        name,
        email,
        image: imageUrl,
        password: hashedPassword,
        speciality,
        degree,
        experience,
        about,
        fees,
        address: JSON.parse(address),
        date: Date.now()
      }

      const newDoctor = new doctorModel(doctorData) 
      await newDoctor.save()

      res.json({success:true,message:"Doctor Added"})

    } catch(error) {
          console.log(error)
          res.json({success:false,message:error.message})
    }

  }
    //API for admin Login
    const loginAdmin = async (req,res) => {
      try {
         const {email, password} = req.body
         if(email === process.env.ADMIN_EMAIL && password === process.env.ADMIN_PASSWORD) {
          const token = jwt.sign(email+password,process.env.JWT_SECRET)  // here a token is generated by jwt using email and password ans JWT_Secret is used to make the token encrypted
          res.json({success:true,token})
         } else { 
          res.json({success:false,message:"Invalid credential"})
         }
      } catch (error) {
        console.log(error)
          res.json({success:false,message:error.message})
      }
    }

    //API to get all the doctors list  for admin panel

    const allDoctors = async (req,res) => {
      try {
        
        const doctors = await doctorModel.find({}).select('-password')   //getting all the doctors except the Password
        res.json({success:true,doctors})
      } catch (error) {
         console.log(error)
         res.json({success:false,message:error.message})
      }
    }

<<<<<<< HEAD
    // Api to get all appointment list
    const appointmentsAdmin = async (req, res) => {
       try {
        
        const appointments = await appointmentModel.find({})
        res.json({success: true, appointments})

       } catch (error) {
         console.log(error)
         res.json({success: false, message: error.message})
       }
    }

    // API for Appointment cancellation
  const appointmentCancel = async (req,res) => {
    try {
        const {appointmentId} = req.body;
        
        const appointmentData = await appointmentModel.findById(appointmentId)

        await appointmentModel.findByIdAndUpdate(appointmentId, {cancelled: true})

    //releasing doctor data
    const {docId, slotDate, slotTime} = appointmentData

       const doctorData = await doctorModel.findById(docId)
       
       let slots_booked = doctorData.slots_booked

       slots_booked[slotDate] = slots_booked[slotDate].filter(e => e !== slotTime)

       await doctorModel.findByIdAndUpdate(docId, {slots_booked})
       res.json({success:true, message:'Appointment cancelled'})

    } catch (error) {
         console.log(error); 
        res.json({ success:false, message:error.message })
    }
 }  

 // Api to get dashboard data for admin panel
 const adminDashboard = async (req, res) => {
     try {
           const doctors = await doctorModel.find({})
           const users = await userModel.find({})
           const appointments = await appointmentModel.find({})

           const dashData = {
            doctors: doctors.length, 
            appointments: appointments.length,
            patient: users.length,
            latestAppointments: appointments.reverse().slice(0,5)
           }

             res.json({success:true, dashData})

     } catch (error) {
       console.log(error); 
        res.json({ success:false, message:error.message })
     }
 }


 
export {addDoctor,loginAdmin, allDoctors, appointmentsAdmin, appointmentCancel, adminDashboard}
=======
export {addDoctor,loginAdmin, allDoctors}
>>>>>>> d6b3eced8a5a1a0b4c95a379cd564575809c0a4c
